name: Migrate to Target

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - Contributing.md
      - .github/**
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"

jobs:
  migrate_to_target:
    name: Migration to Target
    runs-on: ubuntu-latest
    env:
      SOURCE_HOST_URL: ${{ secrets.SOURCE_HOST_URL }}
      SOURCE_TOKEN: ${{ secrets.SOURCE_TOKEN }}
      TARGET_HOST_URL: ${{ secrets.TARGET_HOST_URL }}
      TARGET_TOKEN: ${{ secrets.TARGET_TOKEN }}
      
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipx
          # Attempt to install from local file first
          VERSION=$(ls cicd_aihub-*-py3-none-any.whl | sed 's/cicd_aihub-\(.*\)-py3-none-any.whl/\1/' | head -n 1)

          if [ -n "$VERSION" ]; then
            echo "Found local .whl file: cicd_aihub-${VERSION}-py3-none-any.whl"
            pipx install cicd_aihub-${VERSION}-py3-none-any.whl
          else
            echo "No local .whl file found. Attempting to install from GitHub release."
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/instabase/aihub-apps-ci-cd-workflows/releases/latest | jq -r .tag_name)
            VERSION=$(echo $LATEST_RELEASE | sed 's/^v//')
            
            if ! pipx install https://github.com/instabase/aihub-apps-ci-cd-workflows/releases/download/${LATEST_RELEASE}/cicd_aihub-${VERSION}-py3-none-any.whl; then
              echo "Failed to install from GitHub release. Aborting."
              exit 1
            fi
          fi

      - name: Validate config.json
        run: |
          if [ ! -f config.json ]; then
            echo "Error: config.json file not found"
            exit 1
          fi

          APP_ID=$(jq -r '.source.app_id' config.json)
          if [ -z "$APP_ID" ] || [ "$APP_ID" = "null" ]; then
            echo "Error: app_id is missing or null in config.json"
            exit 1
          fi

      - name: Create or Upload Project
        id: create_project_step
        run: |
          IS_ADVANCED=$(jq -r '.source.is_advanced' config.json)
          SB_NAME=$(jq -r '.source.sb_name' config.json)
          FLOW_PATH=$(jq -r '.source.flow_path' config.json)
          DEPENDENCIES=$(jq -r '.source.dependencies' config.json)
          DEPS_FLAG=""
          if [ -n "$DEPENDENCIES" ] && [ "$DEPENDENCIES" != "null" ]; then
            DEPS_FLAG="--upload_dependencies"
          fi
          if [ "$IS_ADVANCED" = "true" ] && [ -n "$FLOW_PATH" ] && [ "$FLOW_PATH" != "null" ]; then
            promote-solution --promote_solution_to_target $DEPS_FLAG
          elif [ "$IS_ADVANCED" = "true" ] && [ -n "$SB_NAME" ] && [ "$SB_NAME" != "null" ]; then
            promote-sb-solution --promote_solution_to_target $DEPS_FLAG
          else
            promote-build-solution --create_build_project --rebuild
          fi

          PROJECT_ID=$(jq -r '.target.project_id' config.json)
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "Extracted Project ID: $PROJECT_ID"

      - name: Create App
        id: create_app_step
        run: |
          IS_ADVANCED=$(jq -r '.source.is_advanced' config.json)
          SB_NAME=$(jq -r '.source.sb_name' config.json)
          FLOW_PATH=$(jq -r '.source.flow_path' config.json)
          REBUILD=$(jq -r '.settings.rebuild' config.json)
          REBUILD_FLAG=""
          if [ "$REBUILD" = "true" ]; then
            REBUILD_FLAG="--rebuild"
          fi
          if [ "$IS_ADVANCED" = "true" ] && [ -n "$FLOW_PATH" ] && [ "$FLOW_PATH" != "null" ]; then
            promote-solution --publish_advanced_app  
          elif [ "$IS_ADVANCED" = "true" ] && [ -n "$SB_NAME" ] && [ "$SB_NAME" != "null" ]; then
            promote-sb-solution --publish_advanced_app
          else
            promote-build-solution --publish_build_app $REBUILD_FLAG
          fi

      - name: Create Deployment
        id: create_deployment_step
        run: |
          DEPLOYMENT_ID=$(jq -r '.source.deployment_id' config.json)
          DEPLOY_FLAG=""
          if [ -n "$DEPLOYMENT_ID" ] && [ "$DEPLOYMENT_ID" != "null" ]; then
            DEPLOY_FLAG="--create_deployment"
          fi
          if [ "$IS_ADVANCED" = "true" ] && [ -n "$FLOW_PATH" ] && [ "$FLOW_PATH" != "null" ]; then
            promote-solution $DEPLOY_FLAG
          elif [ "$IS_ADVANCED" = "true" ] && [ -n "$SB_NAME" ] && [ "$SB_NAME" != "null" ]; then
            promote-sb-solution $DEPLOY_FLAG
          else
            promote-build-solution $DEPLOY_FLAG
          fi

      - name: Create or Update Tag for Release
        if: success()
        run: |
          git config --global user.email "no-reply@github.com"
          git config --global user.name "GitHub Actions"
          APP_RELEASE_VERSION=$(jq -r '.version' app_details.json)
          git tag -f -a "v${APP_RELEASE_VERSION}" -m "Release version ${APP_RELEASE_VERSION}"
          git push origin "v${APP_RELEASE_VERSION}" --force

      - name: Rollback to Previous Version
        if: failure() && steps.create_app_step.outcome == 'failure'
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag found: $LATEST_TAG"
      
          if [ -z "$LATEST_TAG" ]; then
              echo "No previous version found. Deleting build..."
              promote-build-solution --delete_build
              exit 1
          fi
      
          echo "Reverting to previous version: $LATEST_TAG"
          git reset --hard "$LATEST_TAG"
          git clean -fd  
      
          REBUILD=$(jq -r '.settings.rebuild // "false"' config.json)
          REBUILD_FLAG=""
          if [ "$REBUILD" = "true" ]; then
            REBUILD_FLAG="--rebuild"
          fi
      
          jq --arg project_id "$PROJECT_ID" '.target.project_id = $project_id' config.json > config_updated.json && mv config_updated.json config.json
          promote-build-solution --create_build_project $REBUILD_FLAG
        
